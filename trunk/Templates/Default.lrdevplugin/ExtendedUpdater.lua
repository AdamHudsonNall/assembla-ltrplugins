--[[
        ExtendedUpdater.lua
        
        Note: this could encapsulate check-for-update and uninstall too, but doesn't, yet.
              Main idea is for plugin hook to extend without extending app object.
--]]


local ExtendedUpdater, dbg = Updater:newClass{ className= 'ExtendedUpdater', register=true }



--- Constructor for extending class.
--
--  @param      t       initial table - optional.
--
function ExtendedUpdater:newClass( t )
    return Updater.newClass( self, t )
end



--- Constructor for new instance object.
--      
--  @param      t       initial table - optional.
--
--  @usage      construct enhanced updater with custom copy and/or purge exclusion lists.<br>
--              exclusions are lua regex patterns, and will be applied to sub-path relative to lrplugin dir.
--
function ExtendedUpdater:new( t )
    local copyExcl = { "_AutoGenerated(DoNotEdit)" } -- table of copy exclusions, or nil for none.
    local purgeExcl = nil -- table of purge exclusions, or nil for default ("Preferences/*" are excluded by default).
    local o = Updater.new( self, { copyExcl=copyExcl, purgeExcl=purgeExcl } )
    return o
end



--- Migrate special plugin files.
--
--  @usage  self-me is -plugin-path, self-src is source path of update (lrplugin folder), self-target is update target (lrplugin path) in modules folder.
--
function ExtendedUpdater:migrateSpecials()
    local errs = 0
    if self.me ~= self.target and self.me ~= self.src then
        app:log( "Migrating special plugin files." )
        local metaDefFrom = LrPathUtils.child( self.me, "MetadataDefinition_AutoGenerated(DoNotEdit).lua" )
        local metaDefTo = LrPathUtils.child( self.target, "MetadataDefinition_AutoGenerated(DoNotEdit).lua" )
        if fso:existsAsFile( metaDefFrom ) then
            local s, m = fso:copyFile( metaDefFrom, metaDefTo, false, true )
            if s then
                app:log( "Copied ^1 to ^2", metaDefFrom, metaDefTo )
            else
                app:logErr( "Unable to copy metadata def file, error message: ^1", m )
                errs = errs + 1
            end
        else
            app:logErr( "Metadata def file does not exist: ^1", metaDefFrom )
            errs = errs + 1
        end
        local tsDefFrom = LrPathUtils.child( self.me, "MetadataTagsets_AutoGenerated(DoNotEdit).lua" )
        local tsDefTo = LrPathUtils.child( self.target, "MetadataTagsets_AutoGenerated(DoNotEdit).lua" )
        if fso:existsAsFile( tsDefFrom ) then
            local s, m = fso:copyFile( tsDefFrom, tsDefTo, false, true )
            if s then
                app:log( "Copied ^1 to ^2", tsDefFrom, tsDefTo )
            else
                app:logErr( "Unable to copy tagset def file, error message: ^1", m )
                errs = errs + 1
            end
        else
            app:logErr( "Tagset def file does not exist: ^1", tsDefFrom )
            errs = errs + 1
        end
    else
        app:log( "Migrating special plugin files is not necessary." )
    end
    return errs
end



return ExtendedUpdater
